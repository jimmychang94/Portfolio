@page
@model ProjectsModel
@{
}

<h1>Projects</h1>
<article>
    <h2>Seattle Youth Ministries</h2>
    <p>October 2018</p>

    <h3>The Product</h3>
    <div>
        <p>
            A project for the non-profit group of Seattle Youth Ministries during the Seattle GiveCamp Hackathon.
            <br />
            Seattle Youth Ministries has been using an internal management tool for several years and it has aged and several bugs had been found.
            The problem they presented for the hackathon was to fix bugs and add quality of life changes to this internal management tool.
            <br />
            The hackathon lasted 3 days and there were 6 developers working together on this project.
        </p>
    </div>

    <h3>My Role</h3>
    <div>
        <p>
            I worked as a Full-Stack Software Developer for this project.
            <br />
            I utilized MySQL and SQL queries in order to improve the search functionality with the management tool.
            One of the issues that the non-profit faced was being able to perform a boolean filter which wasn't working properly. 
            I created a condition for which the boolean is set to false and edited the current queries to account for this change. 
            This was so there was an option to find the object whether the boolean was set to true or false.
            <br />
            Another issue that I tackled was with an option which wasn't updating properly.
            One of the main difficulties with this issue was propagating and maintaining the correct value. 
            To propagate the correct value, additional queries were utilized to set the value into the correct locations.
            To maintain the correct value, an additional save feature was implemented.
        </p>
    </div>

    <h3>Languages and Tools</h3>
    <div>
        <ul>
            <li>C#</li>
            <li>SQL</li>
            <li>ASP.Net WebForms</li>
            <li>Visual Studio</li>
            <li>MySQL</li>
            <li>MySQL Workbench</li>
        </ul>
    </div>

</article>

<article>

    <h2>Wordify</h2>
    <a href="https://github.com/jimmychang94/Wordify"><i class="fab fa-github"></i> Github Repo</a>
    <p>August 2018</p>
    
    <h3>The Product</h3>
    <div>
        <p>
            Handwritting is still very useful in today's technology centric life style. It gives you the freedom to write where you want
            on a page and easily switch where on the page you want your next thought to go, and there's the benifit of the muscle memory you gain
            from writing the characters vs just clicking buttons.
            But paper documents can get cluttered, take up real space, and be frustrating to organize.
            <br />
            Wordify is an application designed to help users convert handwritten documents,
            be it class notes, old family recipes, or other papers.
            With this app you can take a photo of your document and scan it with our app to produce machine readable text.
            You can edit and adjust it as you see fit,
            and save the image and text into our database where it is easily organized and referencable for your convenience.
        </p>
    </div>

    <h3>My Role</h3>
    <div>
        <p>
            I worked as a Full-Stack Software Developer for this project. 
            <br />
            I utilized the Microsoft Identity library to set up authentication so users could log into our application.
            This was so that we could store the notes to a certain user allowing them to view, add, edit, and delete any of their own notes. 
            <br />
            Since there was a possibility of having massive amounts of data, the image the user uploads is stored into Azure Blob Storage.
            We still wanted to display the image because there are things that might not have been translated correctly or can't be translated like a diagram.
            I worked on getting this image display functioning properly so we could show the user the image and translated text together whenever they want. 
            <br />
            Utilizing Razor Pages, I created the profile page for the users.
            On this page the user is presented with a list of all of the notes they have stored in our database.
            From here, they could click on the note they want to look at and a card showing both the image that was taken as well as the translated text is shown.
            The user can now edit or delete the note however they want.
            <br>
            To prevent malicious users or inappropriate notes; I created an Admin Dashboard for any administrators for the site.
            The admin gets a list of all users and all notes and can view the note by clicking on it.
            They also have the ability to purge any user or note that is deemed inappropriate.
        </p>
    </div>
    <h3>Languages and Tools:</h3>
    <ul>
        <li>C#</li>
        <li>SQL</li>
        <li>HTML5</li>
        <li>CSS</li>
        <li>Visual Studio</li>
        <li>Microsoft Azure</li>
        <li>Visual Studio Team Services</li>
        <li>Microsoft SQL Server</li>
    </ul>

</article>

<article>
    <h2>JJ Commerce</h2>
    <a href="https://github.com/jimmychang94/JJCommerce"><i class="fab fa-github"> Github Repo</i></a>
    <p>July 2018</p>

    <h3>The Product</h3>
    <div>
        <p>
            This product displays a mock e-commerce site while going through all processes involved with having a functional e-commerce site.
            Authentication is provided for users to buy any of the products sold on the site.
            This is done through the utilization of the Microsoft Identity library.
            We also utilized Google and Microsoft OAuth to allow for users to create an account from their Google or Microsoft account.
            After users add items to their cart, they can checkout and pay through the use of a fake credit card (utilizing Authorize.Net).
            Once the transaction is complete, a receipt is shown and also sent to the user's email address.
        </p>
    </div>

    <h3>My Role</h3>
    <div>
        <p>
            I worked as a Full-Stack Software Developer for this project.
            <br />
            I utilized the Microsoft Identity library to set up authentication so users could log into our application.
            This was so that the user could select products which they would want to buy thus creating baskets for them.
            The user has the ability to add items, delete items, and modify the quantity of a specific item.
            Additionally, a mock page of discounts based off of user information was created as a means to test authentication of specific users.
            <br />
            I created baskets, basket items, and orders to create a checkout system for the e-commerce site.
            The basket holds the user information so that each user only has one active basket.
            The basket items holds the product information as well as the id of which basket it is attached to.
            It has the additional property of quantity for users to edit how many of the product they want.
            The orders holds information on the basket and user it is for as well as the total price and time of the order.
            <br />
            I created the ability for our application to authorize payments using the Authorize.Net API.
            Since this is a mock e-commerce site, I made sure that we were utilizing a fake credit card for the site.
            When prompted to provide a credit card number pre-populated numbers are given which are recognized fake credit cards.
            <br />
            I set up the ability for emails to be sent to the user through SendGrid.
            This was used to welcome the user once they registered on the site.
            More importantly, this functionality was for sending a receipt of what the user purchased to their email address.
        </p>
    </div>


    <h3>Languages and Tools</h3>
    <ul>
        <li>C#</li>
        <li>SQL</li>
        <li>HTML5</li>
        <li>CSS</li>
        <li>Visual Studio</li>
        <li>Microsoft Azure</li>
        <li>Visual Studio Team Services</li>
        <li>Google OAuth</li>
        <li>SendGrid</li>
        <li>Authorize.Net</li>
        <li>Microsoft SQL Server</li>
    </ul>

</article>

<article>
    <h2>Music Playlist</h2>
    <a href="https://github.com/CF-ASPNET-401-Midterm"><i class="fab fa-github"> Github Repo</i></a>
    <p>July 2018</p>

    <h3>The Product</h3>
    <div>
        <p>
            This product is split into two components: a custom API and a web application.
            The custom API stores preset playlists that have been populated from the MusixMatch API.
            The web application allows for users to create a user and call for a playlist based off of a selected genre.
            It also has the ability to create a random playlist from songs in the custom API.
        </p>
    </div>

    <h3>My Role</h3>
    <div>
        <p>
            I made it so that the custom API could call the MusixMatch API and parse the json into data that was relevant for our use.
            I created the controller for the playlists that are stored in the custom API.
            I prepopulated the custom API with playlists from specific genres.
            I wrote unit tests to make sure that data received from the MusixMatch API could be stored and edited.
        </p>
    </div>

    <h3>Languages and Tools</h3>
    <ul>
        <li>C#</li>
        <li>SQL</li>
        <li>HTML5</li>
        <li>CSS</li>
        <li>Visual Studio</li>
        <li>Microsoft Azure</li>
        <li>XUnit Tests</li>
        <li>MusixMatch API</li>
        <li>Postman</li>
        <li>Visual Studio Team Services</li>
        <li>Microsoft SQL Server</li>
    </ul>

</article>
